int main() {
    int indiceHistorico = 0;
    int QuantidadeSeries = 258;
    int menu;
    Serie *serie = (Serie*) malloc(QuantidadeSeries * sizeof(Serie));


    Historico *historico =(Historico*)malloc(indiceHistorico * sizeof(Historico)); 

    FILE *arquivo = fopen("streaming_db.dat", "rb");

    if (arquivo == NULL) {
        perror("Erro ao abrir o arquivo Binario , tentaremos excutar o arquivo csv.\n");
        
        FILE *arquivo = fopen("streaming_db.txt", "r");

         if (arquivo == NULL) {
             perror("Erro ao abrir o arquivo CSV.\n");
              return 1;
        }
        lerSeries(serie, QuantidadeSeries, arquivo);
        salvaDados(serie,QuantidadeSeries);
        
    }else{

        lerSeriesBinario(serie, QuantidadeSeries, arquivo);

    }



    printf("\n\nBusca Streaming\n\n");
    printf("Digite 1 para mostrar todas as series\n");
    printf("Digite 2 para buscar uma serie\n");
    printf("Digite 3 para buscar um genero\n");
    printf("Digite 4 para adicionar uma serie ao historico\n");
    printf("Digite 5 para cadastrar uma serie nova\n");
    printf("Digite 6 para alterar uma serie\n");
    printf("Digite 7 para apagar uma serie\n");
    printf("Digite 8 para salvar os seus dados\n");
    printf("Digite 9 para sair\n");

      scanf("%d",&menu);
       switch (menu){
         
         case 1:
          imprimirSeries(serie, QuantidadeSeries);
           break;

         case 2: 
          Pesquisa(serie,QuantidadeSeries);
            break;

         case 3:
          BuscaGenero(serie,QuantidadeSeries);
           break;
         
         case 4:
          indiceHistorico=salvaHistorico(serie,QuantidadeSeries,historico,indiceHistorico);
           break;

         case 5:
          QuantidadeSeries = cadastrar(QuantidadeSeries, serie);
            break;
         case 6:
          Alterar(QuantidadeSeries, serie);
           break;
         
         case 7: 
          apagar(QuantidadeSeries, serie);
           break;
       
         case 8:
          salvaDados(serie,QuantidadeSeries);
           break;

         case 9:
           break; 
       }



    free(serie);
    free (historico);
    fclose(arquivo);
    

    return 0;
}
